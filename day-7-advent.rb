require 'pry'

#INPUT = [3,225,1,225,6,6,1100,1,238,225,104,0,1101,61,45,225,102,94,66,224,101,-3854,224,224,4,224,102,8,223,223,1001,224,7,224,1,223,224,223,1101,31,30,225,1102,39,44,224,1001,224,-1716,224,4,224,102,8,223,223,1001,224,7,224,1,224,223,223,1101,92,41,225,101,90,40,224,1001,224,-120,224,4,224,102,8,223,223,1001,224,1,224,1,223,224,223,1101,51,78,224,101,-129,224,224,4,224,1002,223,8,223,1001,224,6,224,1,224,223,223,1,170,13,224,101,-140,224,224,4,224,102,8,223,223,1001,224,4,224,1,223,224,223,1101,14,58,225,1102,58,29,225,1102,68,70,225,1002,217,87,224,101,-783,224,224,4,224,102,8,223,223,101,2,224,224,1,224,223,223,1101,19,79,225,1001,135,42,224,1001,224,-56,224,4,224,102,8,223,223,1001,224,6,224,1,224,223,223,2,139,144,224,1001,224,-4060,224,4,224,102,8,223,223,101,1,224,224,1,223,224,223,1102,9,51,225,4,223,99,0,0,0,677,0,0,0,0,0,0,0,0,0,0,0,1105,0,99999,1105,227,247,1105,1,99999,1005,227,99999,1005,0,256,1105,1,99999,1106,227,99999,1106,0,265,1105,1,99999,1006,0,99999,1006,227,274,1105,1,99999,1105,1,280,1105,1,99999,1,225,225,225,1101,294,0,0,105,1,0,1105,1,99999,1106,0,300,1105,1,99999,1,225,225,225,1101,314,0,0,106,0,0,1105,1,99999,1008,677,226,224,102,2,223,223,1006,224,329,101,1,223,223,108,677,677,224,102,2,223,223,1005,224,344,101,1,223,223,107,677,677,224,1002,223,2,223,1005,224,359,101,1,223,223,1107,226,677,224,1002,223,2,223,1005,224,374,1001,223,1,223,1008,677,677,224,102,2,223,223,1006,224,389,1001,223,1,223,1007,677,677,224,1002,223,2,223,1006,224,404,1001,223,1,223,8,677,226,224,102,2,223,223,1005,224,419,1001,223,1,223,8,226,226,224,102,2,223,223,1006,224,434,101,1,223,223,1107,226,226,224,1002,223,2,223,1006,224,449,101,1,223,223,1107,677,226,224,102,2,223,223,1005,224,464,101,1,223,223,1108,226,226,224,102,2,223,223,1006,224,479,1001,223,1,223,7,677,677,224,1002,223,2,223,1006,224,494,101,1,223,223,7,677,226,224,102,2,223,223,1005,224,509,101,1,223,223,1108,226,677,224,1002,223,2,223,1006,224,524,101,1,223,223,8,226,677,224,1002,223,2,223,1005,224,539,101,1,223,223,1007,226,226,224,102,2,223,223,1006,224,554,1001,223,1,223,108,226,226,224,1002,223,2,223,1006,224,569,1001,223,1,223,1108,677,226,224,102,2,223,223,1005,224,584,101,1,223,223,108,226,677,224,102,2,223,223,1005,224,599,101,1,223,223,1007,226,677,224,102,2,223,223,1006,224,614,1001,223,1,223,1008,226,226,224,1002,223,2,223,1006,224,629,1001,223,1,223,107,226,226,224,1002,223,2,223,1006,224,644,101,1,223,223,7,226,677,224,102,2,223,223,1005,224,659,1001,223,1,223,107,677,226,224,102,2,223,223,1005,224,674,1001,223,1,223,4,223,99,226]

# INPUT= [3,12,6,12,15,1,13,14,13,4,13,99,-1,0,1,9]
# position mode: 0
# its value is the value stored at address index in memory (old style)

# immediate mode: 1
# value is the position itself (index)

#CODE = [3,8,1001,8,10,8,105,1,0,0,21,38,59,84,97,110,191,272,353,434,99999,3,9,1002,9,2,9,101,4,9,9,1002,9,2,9,4,9,99,3,9,102,5,9,9,1001,9,3,9,1002,9,5,9,101,5,9,9,4,9,99,3,9,102,5,9,9,101,5,9,9,1002,9,3,9,101,2,9,9,1002,9,4,9,4,9,99,3,9,101,3,9,9,1002,9,3,9,4,9,99,3,9,102,5,9,9,1001,9,3,9,4,9,99,3,9,101,2,9,9,4,9,3,9,102,2,9,9,4,9,3,9,101,1,9,9,4,9,3,9,1002,9,2,9,4,9,3,9,1002,9,2,9,4,9,3,9,101,2,9,9,4,9,3,9,1001,9,2,9,4,9,3,9,102,2,9,9,4,9,3,9,101,2,9,9,4,9,3,9,1002,9,2,9,4,9,99,3,9,1002,9,2,9,4,9,3,9,1002,9,2,9,4,9,3,9,1002,9,2,9,4,9,3,9,101,1,9,9,4,9,3,9,1002,9,2,9,4,9,3,9,101,1,9,9,4,9,3,9,101,2,9,9,4,9,3,9,1001,9,1,9,4,9,3,9,1001,9,1,9,4,9,3,9,1001,9,2,9,4,9,99,3,9,1001,9,2,9,4,9,3,9,1002,9,2,9,4,9,3,9,102,2,9,9,4,9,3,9,1002,9,2,9,4,9,3,9,1001,9,2,9,4,9,3,9,1001,9,2,9,4,9,3,9,1001,9,1,9,4,9,3,9,1002,9,2,9,4,9,3,9,102,2,9,9,4,9,3,9,1002,9,2,9,4,9,99,3,9,101,2,9,9,4,9,3,9,101,1,9,9,4,9,3,9,102,2,9,9,4,9,3,9,101,1,9,9,4,9,3,9,101,2,9,9,4,9,3,9,101,1,9,9,4,9,3,9,102,2,9,9,4,9,3,9,1001,9,2,9,4,9,3,9,1002,9,2,9,4,9,3,9,1002,9,2,9,4,9,99,3,9,1001,9,1,9,4,9,3,9,102,2,9,9,4,9,3,9,102,2,9,9,4,9,3,9,1001,9,2,9,4,9,3,9,101,1,9,9,4,9,3,9,1002,9,2,9,4,9,3,9,1001,9,1,9,4,9,3,9,102,2,9,9,4,9,3,9,1001,9,2,9,4,9,3,9,101,1,9,9,4,9,99]

# CODE = [3,23,3,24,1002,24,10,24,1002,23,-1,23,
# 101,5,23,23,1,24,23,23,4,23,99,0,0]

CODE = [3,8,1001,8,10,8,105,1,0,0,21,38,59,84,97,110,191,272,353,434,99999,3,9,1002,9,2,9,101,4,9,9,1002,9,2,9,4,9,99,3,9,102,5,9,9,1001,9,3,9,1002,9,5,9,101,5,9,9,4,9,99,3,9,102,5,9,9,101,5,9,9,1002,9,3,9,101,2,9,9,1002,9,4,9,4,9,99,3,9,101,3,9,9,1002,9,3,9,4,9,99,3,9,102,5,9,9,1001,9,3,9,4,9,99,3,9,101,2,9,9,4,9,3,9,102,2,9,9,4,9,3,9,101,1,9,9,4,9,3,9,1002,9,2,9,4,9,3,9,1002,9,2,9,4,9,3,9,101,2,9,9,4,9,3,9,1001,9,2,9,4,9,3,9,102,2,9,9,4,9,3,9,101,2,9,9,4,9,3,9,1002,9,2,9,4,9,99,3,9,1002,9,2,9,4,9,3,9,1002,9,2,9,4,9,3,9,1002,9,2,9,4,9,3,9,101,1,9,9,4,9,3,9,1002,9,2,9,4,9,3,9,101,1,9,9,4,9,3,9,101,2,9,9,4,9,3,9,1001,9,1,9,4,9,3,9,1001,9,1,9,4,9,3,9,1001,9,2,9,4,9,99,3,9,1001,9,2,9,4,9,3,9,1002,9,2,9,4,9,3,9,102,2,9,9,4,9,3,9,1002,9,2,9,4,9,3,9,1001,9,2,9,4,9,3,9,1001,9,2,9,4,9,3,9,1001,9,1,9,4,9,3,9,1002,9,2,9,4,9,3,9,102,2,9,9,4,9,3,9,1002,9,2,9,4,9,99,3,9,101,2,9,9,4,9,3,9,101,1,9,9,4,9,3,9,102,2,9,9,4,9,3,9,101,1,9,9,4,9,3,9,101,2,9,9,4,9,3,9,101,1,9,9,4,9,3,9,102,2,9,9,4,9,3,9,1001,9,2,9,4,9,3,9,1002,9,2,9,4,9,3,9,1002,9,2,9,4,9,99,3,9,1001,9,1,9,4,9,3,9,102,2,9,9,4,9,3,9,102,2,9,9,4,9,3,9,1001,9,2,9,4,9,3,9,101,1,9,9,4,9,3,9,1002,9,2,9,4,9,3,9,1001,9,1,9,4,9,3,9,102,2,9,9,4,9,3,9,1001,9,2,9,4,9,3,9,101,1,9,9,4,9,99]

class Intcode
  attr_accessor :finished, :result
  def initialize(code)
    @code = code.dup
    @inputs = []
    @pos = 0
    @result = 0
    @history = []
    @finished = false
  end

  def decode_opcode
    @modes = [0, 0, 0]
    if @instruction.to_s.length == 1
      return @opcode = @instruction
    else
      arr = @instruction.to_s.split('')
      @opcode = arr[-2..-1].join('').to_i
      arr.reverse[2..-1].each_with_index do |m, i|
        @modes[i] = m.to_i
      end
    end
  end

  def read
    until @code[@pos].nil?

      @instruction = @code[@pos]
      decode_opcode
      # p "-------------"
      # p @instruction
      # p @modes
      case @opcode
        when 1
          one
        when 2
          two
        when 3
          three
        when 4
          return four
        when 5
          five
        when 6
          six
        when 7
          seven
        when 8
          eight
        else
          break
      end
    end
    @finished = true
    @result
  end

  def add_input(new_input)
    @inputs << new_input
  end

  def get_two_params
    @param1 = @modes[0] == 0 ? @code[@code[@pos + 1]] : @code[@pos + 1]
    @param2 = @modes[1] == 0 ? @code[@code[@pos + 2]] : @code[@pos + 2]
  end

  def one
    # add the two parameters
    get_two_params
    @code[@code[@pos + 3]] = @param1 + @param2
    @pos += 4
  end

  def two
    get_two_params
    @code[@code[@pos + 3]] = @param1 * @param2
    @pos += 4
  end

  def three
    # 2 inputs: first input is the phase_signal, second is the output of the previous amp
    input = @inputs.shift
    @code[@code[@pos + 1]] = input
    @pos += 2
  end

  def four
    output = @modes[0] == 0 ? @code[@code[@pos + 1]] : @code[@pos + 1]
    #output = @code[@code[@pos + 1]]
    @result = output
    @pos += 2
    output
  end

  def five
    get_two_params
    if @param1 != 0
      @pos = @param2
    else
      @pos += 3
    end
  end

  def six
    get_two_params
    if @param1 == 0
      @pos = @param2
    else
      @pos += 3
    end
  end

  def seven
    get_two_params
    value = 0
    value = 1 if @param1 < @param2
    @code[@code[@pos + 3]] = value
    @pos += 4
  end

  def eight
    get_two_params
    value = 0
    value = 1 if @param1 == @param2
    @code[@code[@pos + 3]] = value
    @pos += 4
  end
end

class Amplifier
  def initialize(phase_setting, name)
    @intcode = Intcode.new(CODE)
    @intcode.add_input(phase_setting)
    @name = name
  end

  def run_intcode(input)
    p @name
    @intcode.add_input(input)
    @intcode.read
  end

  def finished?
    @intcode.finished
  end
  def result
    @intcode.result
  end
end


class Thruster
  def initialize(sequence)
    @amplifiers = initialize_amplifiers(sequence)
    @current_amplifier = 0
  end

  def initialize_amplifiers(sequence)
    res = []
    names = ('A'..'E').to_a
    sequence.each_with_index do |seq, i|
      res << Amplifier.new(seq, names[i])
    end
    res
  end

  def compute_signal(input)
    until @amplifiers.last.finished?
      input = @amplifiers[@current_amplifier].run_intcode(input)
      @current_amplifier = @current_amplifier == 4 ? 0 : @current_amplifier += 1
    end
    input
  end

  # def all_amplifiers_finished
  #   !@amplifiers.select{ |_, amp| !amp.finished? }.any?
  # end
end

max = 0
[9,7,8,5,6].permutation do |perm|
  thruster = Thruster.new(perm)
  res = thruster.compute_signal(0)
  p res
  max = res if res > max
end

p max
