require 'pry'

INPUT = [3,225,1,225,6,6,1100,1,238,225,104,0,1101,61,45,225,102,94,66,224,101,-3854,224,224,4,224,102,8,223,223,1001,224,7,224,1,223,224,223,1101,31,30,225,1102,39,44,224,1001,224,-1716,224,4,224,102,8,223,223,1001,224,7,224,1,224,223,223,1101,92,41,225,101,90,40,224,1001,224,-120,224,4,224,102,8,223,223,1001,224,1,224,1,223,224,223,1101,51,78,224,101,-129,224,224,4,224,1002,223,8,223,1001,224,6,224,1,224,223,223,1,170,13,224,101,-140,224,224,4,224,102,8,223,223,1001,224,4,224,1,223,224,223,1101,14,58,225,1102,58,29,225,1102,68,70,225,1002,217,87,224,101,-783,224,224,4,224,102,8,223,223,101,2,224,224,1,224,223,223,1101,19,79,225,1001,135,42,224,1001,224,-56,224,4,224,102,8,223,223,1001,224,6,224,1,224,223,223,2,139,144,224,1001,224,-4060,224,4,224,102,8,223,223,101,1,224,224,1,223,224,223,1102,9,51,225,4,223,99,0,0,0,677,0,0,0,0,0,0,0,0,0,0,0,1105,0,99999,1105,227,247,1105,1,99999,1005,227,99999,1005,0,256,1105,1,99999,1106,227,99999,1106,0,265,1105,1,99999,1006,0,99999,1006,227,274,1105,1,99999,1105,1,280,1105,1,99999,1,225,225,225,1101,294,0,0,105,1,0,1105,1,99999,1106,0,300,1105,1,99999,1,225,225,225,1101,314,0,0,106,0,0,1105,1,99999,1008,677,226,224,102,2,223,223,1006,224,329,101,1,223,223,108,677,677,224,102,2,223,223,1005,224,344,101,1,223,223,107,677,677,224,1002,223,2,223,1005,224,359,101,1,223,223,1107,226,677,224,1002,223,2,223,1005,224,374,1001,223,1,223,1008,677,677,224,102,2,223,223,1006,224,389,1001,223,1,223,1007,677,677,224,1002,223,2,223,1006,224,404,1001,223,1,223,8,677,226,224,102,2,223,223,1005,224,419,1001,223,1,223,8,226,226,224,102,2,223,223,1006,224,434,101,1,223,223,1107,226,226,224,1002,223,2,223,1006,224,449,101,1,223,223,1107,677,226,224,102,2,223,223,1005,224,464,101,1,223,223,1108,226,226,224,102,2,223,223,1006,224,479,1001,223,1,223,7,677,677,224,1002,223,2,223,1006,224,494,101,1,223,223,7,677,226,224,102,2,223,223,1005,224,509,101,1,223,223,1108,226,677,224,1002,223,2,223,1006,224,524,101,1,223,223,8,226,677,224,1002,223,2,223,1005,224,539,101,1,223,223,1007,226,226,224,102,2,223,223,1006,224,554,1001,223,1,223,108,226,226,224,1002,223,2,223,1006,224,569,1001,223,1,223,1108,677,226,224,102,2,223,223,1005,224,584,101,1,223,223,108,226,677,224,102,2,223,223,1005,224,599,101,1,223,223,1007,226,677,224,102,2,223,223,1006,224,614,1001,223,1,223,1008,226,226,224,1002,223,2,223,1006,224,629,1001,223,1,223,107,226,226,224,1002,223,2,223,1006,224,644,101,1,223,223,7,226,677,224,102,2,223,223,1005,224,659,1001,223,1,223,107,677,226,224,102,2,223,223,1005,224,674,1001,223,1,223,4,223,99,226]

# INPUT= [3,12,6,12,15,1,13,14,13,4,13,99,-1,0,1,9]
# position mode: 0
# its value is the value stored at address index in memory (old style)

# immediate mode: 1
# value is the position itself (index)

class Intcode
  def initialize(code)
    @code = code
    @pos = 0
    @history = []
  end

  def decode_opcode
    # instruction = 1102
    @modes = [0, 0, 0]
    if @instruction.to_s.length == 1
      return @opcode = @instruction
    else
      #new_arr = @instruction.to_a.join('')
      #arr = new_arr.split('')
      arr = @instruction.to_s.split('')
      @opcode = arr[-2..-1].join('').to_i
      # arr = [1, 1]
      arr.reverse[2..-1].each_with_index do |m, i|
        @modes[i] = m.to_i
      end
    end
  end

  def read
    until @code[@pos].nil?
      @instruction = @code[@pos]
      decode_opcode
      # p "-------------"
      # p @instruction
      # p @modes
      case @opcode
        when 1
          one
        when 2
          two
        when 3
          three
        when 4
          four
        when 5
          five
        when 6
          six
        when 7
          seven
        when 8
          eight
        else
          break
      end
    end
  end

  def get_two_params
    @param1 = @modes[0] == 0 ? @code[@code[@pos + 1]] : @code[@pos + 1]
    @param2 = @modes[1] == 0 ? @code[@code[@pos + 2]] : @code[@pos + 2]
  end

  def one
    # add the two parameters
    get_two_params
    @code[@code[@pos + 3]] = @param1 + @param2
    @pos += 4
  end

  def two
    get_two_params
    @code[@code[@pos + 3]] = @param1 * @param2
    @pos += 4
  end

  def three
    input = gets.chomp.to_i
    @code[@code[@pos + 1]] = input
    @pos += 2
  end

  def four
    output = @modes[0] == 0 ? @code[@code[@pos + 1]] : @code[@pos + 1]
    #output = @code[@code[@pos + 1]]
    p output
    @pos += 2
  end

  def five
    get_two_params
    if @param1 != 0
      @pos = @param2
    else
      @pos += 3
    end
  end

  def six
    get_two_params
    if @param1 == 0
      @pos = @param2
    else
      @pos += 3
    end
  end

  def seven
    get_two_params
    value = 0
    value = 1 if @param1 < @param2
    @code[@code[@pos + 3]] = value
    @pos += 4
  end

  def eight
    get_two_params
    value = 0
    value = 1 if @param1 == @param2
    @code[@code[@pos + 3]] = value
    @pos += 4
  end

end

intcode = Intcode.new(INPUT)
intcode.read



# Finish history
# Need to finish param
# add initial_params, result, modes
